<?php

namespace cms\controllers;

use cms\components\BackendController;
use cms\models\MagazineContent;
use wap\models\News;
use Yii;
use cms\models\Magazine;
use cms\models\search\MagazineSearch;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * MagazineController implements the CRUD actions for Magazine model.
 */
class MagazineController extends BackendController
{

    public function beforeAction($action)
    {
        $this->layout = 'magazine';
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    /**
     * Lists all Magazine models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new MagazineSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Magazine model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Magazine model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Magazine();

        if ($model->load(Yii::$app->request->post())) {

            if(empty($model->public_time)){
                $model->public_time = date("Y-m-d H:i:s");
            }else{
                if(strtotime($model->public_time) < time()){
                    $model->public_time = date("Y-m-d H:i:s");
                }
            }

            $model->created_by = Yii::$app->user->id;
            $model->created_time = date('Y-m-d H:i:s');
            $model->updated_by = Yii::$app->user->id;
            $model->updated_time = date('Y-m-d H:i:s');
            $rel_ids = Yii::$app->request->post('rel_ids');
            if(!empty($rel_ids)){
                $model->rel_ids = implode(',', $rel_ids);
            }else{
                $model->rel_ids = '';
            }

            if ($model->save()) {
                //Yii::$app->session->setFlash('success', Yii::t('cms', 'Success!'));
                return $this->redirect(['update', 'id' => $model->id, 'tab' => 'content']);
            }
            Yii::$app->session->setFlash('error', Yii::t('cms', 'Error!'));
        }
        return $this->render('create', [
            'model' => $model,
        ]);

    }

    /**
     * Updates an existing Magazine model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        $time_active = empty($model->public_time)?$model->created_time:$model->public_time;
        if ($model->load(Yii::$app->request->post())) {
            $model->updated_by = Yii::$app->user->id;
            $model->updated_time = date('Y-m-d H:i:s');
            $rel_ids = Yii::$app->request->post('rel_ids');
            if(!empty($rel_ids)){
                $model->rel_ids = implode(',', $rel_ids);
            }else{
                $model->rel_ids = '';
            }
            if(empty($model->public_time)){
                $model->public_time = $time_active;
            }else{
                if(strtotime($model->public_time) < strtotime($model->created_time)){
                    $model->public_time = $time_active;
                }
            }
            if ($model->save()) {
                $blocks = Yii::$app->request->post('blocks');
                if(!empty($blocks)){
                    foreach ($blocks as $key => $block){
                        $content = MagazineContent::findOne($block);
                        if(empty($content)) continue;
                        $content->sort_order = $key;
                        $content->save(false);
                    }
                    MagazineContent::deleteAll(['AND',
                        ['magazine_id' => $model->id],
                        ['NOT IN', 'id', $blocks]
                    ]);
                }else{
                    MagazineContent::deleteAll(['magazine_id' => $model->id]);
                }

                Yii::$app->session->setFlash('success', Yii::t('cms', 'Success!'));
                //return $this->redirect(['view', 'id' => $model->id]);
            }else {
                Yii::$app->session->setFlash('error', Yii::t('cms', 'Error!'));
            }
        }
        return $this->render('update', [
            'model' => $model,
        ]);

    }
	
	public function actionChangeStatusHot() {
        if (!Yii::$app->getRequest()->isAjax)
            Yii::$app->end();
        $id = (int) ArrayHelper::getValue($_POST, 'id', 0);
        $status = (int) ArrayHelper::getValue($_POST, 'status', 0);
        $statusChange = ($status == 1) ? 0 : 1;
        $message = ($status == 1) ? (Yii::t('cms', 'app_status_inactive_success')) : (Yii::t('cms', 'app_status_active_success'));
        $titleValue = ($status == 1) ? (Yii::t('cms', 'app_status_active')) : Yii::t('cms', 'app_status_inactive');

        $model = $this->findModel($id);
        $updateStatus = $model->updateAttributes(array('is_hot' => $statusChange));
        if ($updateStatus) {
            echo Json::encode(array('status' => 1, 'message' => $message, 'value' => $titleValue));
            exit();
        } else {
            echo Json::encode(array('status' => -1, 'message' => Yii::t('cms', 'app_status_active_fail')));
            exit();
        }
    }

    /**
     * Deletes an existing Magazine model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Magazine model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Magazine the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Magazine::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }


    public function actionBlockType(){
        $this->layout = false;
        $id = Yii::$app->request->get('id', 0);
        $model = $this->findModel($id);
        return $this->render('block-type', [
            'model' => $model,
        ]);
    }

    function actionSearchNews(){
        $query = Yii::$app->request->get('q');
        $return = [];
        if(!empty($query)) {
            $datas = News::find()->where(['OR',['like', 'title', $query], ['id' => $query]])
                ->andWhere(['deleted' => 0])
                ->andWhere(['<=', 'time_active', date('Y-m-d H:i:s')])
                ->limit(20)
                ->orderBy('time_active DESC')
                ->all();
            if(!empty($datas)){
                foreach ($datas as $data){
                    $return['results'][] = [
                        'id' => $data->id,
                        'text' => $data->title,
                    ];
                }
            }
        }else{
            $return = ['results' => ['id' => '', 'text' => '']];
        }
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return $return;
    }
}
