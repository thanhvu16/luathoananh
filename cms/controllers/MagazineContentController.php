<?php

namespace cms\controllers;

use cms\components\BackendController;
use cms\models\Magazine;
use Yii;
use cms\models\MagazineContent;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * MagazineContentController implements the CRUD actions for MagazineContent model.
 */
class MagazineContentController extends BackendController
{

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->layout = 'magazine_embed';
    }

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    /**
     * Creates a new MagazineContent model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        if (!Yii::$app->request->isPost) {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
        $this->layout = false;
        $id = Yii::$app->request->post('id', 0);
        $type = Yii::$app->request->post('type', 0);
        $allTypes = MagazineContent::getAllTypes();

        if (empty($allTypes[$type])) {
            echo '';
            die;
        }
        $magazine = Magazine::findOne($id);
        if (empty($magazine)) {
            echo '';
            die;
        }

        $model = new MagazineContent();
        $model->magazine_id = $magazine->id;
        $model->block_type = $type;
        $model->updated_time = date('Y-m-d H:i:s');
        $model->updated_by= Yii::$app->user->id;
        $model->sort_order = 1000;
        $model->save(false);

        return $this->render('create', [
            'model' => $model,
            'typeContent' => $allTypes[$type],
            'magazine' => $magazine
        ]);
    }

    /**
     * Updates an existing MagazineContent model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if (Yii::$app->request->isPost) {
            $content = Yii::$app->request->post('content');
            $content_mobile = Yii::$app->request->post('content_mobile');
            if(!empty($content)){
                $model->content = serialize($content);
                $model->content_mobile = serialize($content_mobile);
                $model->updated_time = date('Y-m-d H:i:s');
                $model->updated_by= Yii::$app->user->id;
                if($model->save(false)){
                    Yii::$app->session->setFlash('success', Yii::t('cms', 'Success!'));
                }
            }
        }
        return $this->render('update', [
            'model' => $model,
        ]);

    }

    /**
     * Deletes an existing MagazineContent model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the MagazineContent model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return MagazineContent the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = MagazineContent::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }


    public function actionRefresh()
    {
        $this->layout = false;
        $id = Yii::$app->request->get('id', 0);
        $model = $this->findModel($id);
        $allTypes = MagazineContent::getAllTypes();

        $magazine = Magazine::findOne($model->magazine_id);

        return $this->render('refresh', [
            'model' => $model,
            'typeContent' => $allTypes[$model->block_type],
            'magazine' => $magazine
        ]);
    }
}
